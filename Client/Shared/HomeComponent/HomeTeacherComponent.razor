@page "/teacher-dashboard"

@using Radzen.Blazor.Rendering
@using STIMULUS_V2.Client.Shared.TheoryComponent
@using STIMULUS_V2.Shared.Interface.ChildInterface
@using STIMULUS_V2.Shared.Models.Entities
@using System.Globalization
@inject IPageEtudiantService PageEtudiantService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="teacher-info-container">
    <div class="container text-center">
        <p class="lead">Vous êtes un Professeur</p>
    </div>
</div>

<div class="box-display">
    <RadzenText TextStyle="TextStyle.DisplayH3">Tableau de bord</RadzenText>
    <div class="row">
        <div class="col-sm-12 col-lg-6 offset-lg-3 my-5">
            <RadzenCard class="w-100 mb-4">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" Style="margin-left: 8px; vertical-align: middle;" />
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="Smooth" For="smooth" Class="rz-mr-6" />
            </RadzenCard>
        </div>

        <div class="col-sm-11 col-lg-5 my-5">
            <RadzenChart>
                <RadzenPieSeries Data="@progression" Title="Student" CategoryProperty="Student" ValueProperty="Progression">
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenPieSeries>
            </RadzenChart>
        </div>

        <div class="col-sm-11 col-lg-5 my-5">
            <RadzenChart>
                <RadzenAreaSeries Smooth="@smooth" Data="@progression" CategoryProperty="Student" Title="Progression" ValueProperty="Progression" RenderingOrder="1">
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenAreaSeries>
            </RadzenChart>
        </div>
    </div>
</div>
<style>
    .box-display {
        text-align: center;
        align-items: center;
        background-color: lightgrey;
        border-radius: 10px;
        margin-bottom: 20px;
        margin-left: 10px;
        margin-right: 10px;
    }
</style>

@code {
    bool showDataLabels = false;
    bool smooth = true;

    class DataItem
    {
        public string Student { get; set; }
        public double Progression { get; set; }
    }

    DataItem[] progression;

    async Task UpdateProgression()
    {
        int groupeId = 1;
        string codeDa = "Q1";
        string professeurIdentifiant = await sessionStorage.GetItemAsync<string>("idProf"); ;

        foreach (var item in progression)
        {
            var response = await PageEtudiantService.CalculerPourcentage(groupeId, codeDa, professeurIdentifiant);

            if (response.StatusCode >= 200 && response.StatusCode <= 299)
            {
                item.Progression = response.Data;
                Console.WriteLine(item);
            }
            else
            {
                // Handle error, e.g., log or display a message
                Console.WriteLine($"Error updating progression for {item.Student}: {response.Message}");
            }
        }
    }

    // Call the UpdateProgression method when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        await UpdateProgression();
    }
}
