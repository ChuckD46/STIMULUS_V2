﻿@using Microsoft.CodeAnalysis;
@using System.Text;
@using STIMULUS_V2.Client.Services;
@using STIMULUS_V2.Client.Shared.NoeudComponents
@using STIMULUS_V2.Shared.Models.DTOs;
@using STIMULUS_V2.Shared.Models.Entities;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using static STIMULUS_V2.Client.Shared.NoeudComponents.Connector;
@using static STIMULUS_V2.Client.Shared.NoeudComponents.NoeudsProf;

@inject INoeudService NoeudService
@inject IGrapheService GrapheService
@inject IPageService PageService
@inject IComposantService ComposantService
@inject MouseService mouseSrv
@inject IUpdateService updateService
@inject NavigationManager NavigationManager
@inject AppState State;
@inject IJSRuntime JSRuntim
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Radzen.DialogService DialogService

<div class="row mt-2">
    <foreignObject class="custom-graphe-foreignobject-bg" x="5" y="5" width="150" height="50">
        <RadzenStack class="divGrapheEntete" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
            <RadzenButton Style="background-color: darkblue" class="custom-graphe-zoom-button" Text="+" ButtonStyle="ButtonStyle.Primary" Click=AugmenterZoom />
            <RadzenButton Style="background-color: darkblue" class="custom-graphe-zoomout-button" Text="-" ButtonStyle="ButtonStyle.Primary" Click=ReduireZoom />
            <RadzenButton Style="background-color: darkblue" class="custom-graphe-reset-button" Icon="refresh" ButtonStyle="ButtonStyle.Primary" Click=ResetViewbox />
            <RadzenText class="custom-graphe-zoom-text" TextStyle="TextStyle.DisplayH3">Zoom: @AfficheZoom()</RadzenText>
            <RadzenButton Click=@(args => ModeDeVue(2)) Text="Édition" ButtonStyle="@modeDeVuButtonEdition" />
            <RadzenButton Click=@(args => ModeDeVue(1)) Text="Gestion de pages" ButtonStyle="@modeDeVuButtonPage" />
            <RadzenButton Click=@(args => ModeDeVue(3)) Text="Vue étudiante" ButtonStyle="@modeDeVuButtonEtudiant" />
            <RadzenButton Click=SupprimerGraphe Text="Supprimer le graphe" ButtonStyle="ButtonStyle.Danger" style="background-color: darkblue; margin-left: auto;" />
        </RadzenStack>
    </foreignObject>
    <svg class="bg-transparent" width="100%" height="2000" xmlns="http://www.w3.org/2000/svg">
        @*<rect width="180" height="180" x="0" y="5" fill="#32587a"></rect>*@
        <foreignObject class="bg-transparent" x="0" y="5" width="160" height="205">
            <RadzenPanel class="custom-graphe-legend-panel">
                <RadzenStack class="custom-graphe-legend-stack" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                    <RadzenLabel style="color:black;text-decoration: underline;">Légende</RadzenLabel>
                    <div class="custom-graphe-legend-color-position">
                        <div style="display: flex; align-items: center; justify-content: center;">
                            <RadzenLabel>Bloqué</RadzenLabel>
                            <RadzenImage class="custom-graphe-legend-color-size" Path="/RessourceVisuel/Legende/140-140-140.png"></RadzenImage>
                        </div>
                    </div>
                    <div class="custom-graphe-legend-color-position">
                        <div style="display: flex; align-items: center; justify-content: center;">
                            <RadzenLabel>Disponible</RadzenLabel>
                            <RadzenImage class="custom-graphe-legend-color-size" Path="/RessourceVisuel/Legende/228-231-245.png"></RadzenImage>
                        </div>
                    </div>
                    <div class="custom-graphe-legend-color-position">
                        <div style="display: flex; align-items: center; justify-content: center;">
                            <RadzenLabel>Consulté</RadzenLabel>
                            <RadzenImage class="custom-graphe-legend-color-size" Path="/RessourceVisuel/Legende/199-160-53.png"></RadzenImage>
                        </div>
                    </div>
                    <div class="custom-graphe-legend-color-position">
                        <div style="display: flex; align-items: center; justify-content: center;">
                            <RadzenLabel>Complété</RadzenLabel>
                            <RadzenImage class="custom-graphe-legend-color-size" Path="/RessourceVisuel/Legende/88-150-105.png"></RadzenImage>
                        </div>
                    </div>
                </RadzenStack>
            </RadzenPanel>
        </foreignObject>
        <svg class="bg-transparent" width="100%" height="1800" xmlns="http://www.w3.org/2000/svg" viewBox="@viewBoxX @viewBoxY @viewBoxWidth @viewBoxWidth" @onmousemove=@(e => mouseSrv.FireMove(this, e)) @onmouseup=@(e => mouseSrv.FireUp(this, e)) @onmousewheel="Zoom">
            <Draggable X="@((viewBoxWidth - 1800) / 2)" Y="@((viewBoxWidth - 1500) / 2)" GetModeDeVue="GetModeFond">
                <rect x="-1000" y="-1000" width="4000" height="4000" style="fill:rgb(0,0,0,0);stroke-width:0;stroke:rgb(0,0,0)" />
                @foreach (var noeud in Nodes)
                {
                    <NoeudsProf 
                        UpdateGraphe="UpdateGraphe" 
                        GetModeDeVue="GetModeDeVue" 
                        RelinkBindNode="RelinkBindNode" 
                        ReLinkNoeud="ReLinkNoeud"
                        Node="@noeud" 
                        Nodes="@Nodes" SaveChangeNoeud="SaveChange" 
                        AjoutNouveauNoeud="AjoutNouveauNoeud" 
                        SupprNoeud="SupprimerNoeud"
                        ReLinkBindPage="ReLinkBindPage"
                        ReLinkPage="ReLinkPage"/>
                }
            </Draggable>
        </svg>
    </svg>
</div>

@code {
    private string displayHover = "hidden";
    private double viewBoxX = 0;
    private double viewBoxY = 0;
    private double viewBoxWidth = 2000;
    private double viewBoxHeight = 2000;
    private double zoomIncrement = 100;
    private Noeud enfantRechercheParent = new();
    private bool enRecherche = false;
    private Page pageRechercheNoeud = new();
    private bool enRecherchePage = new();
    private bool upt = false;
    private int modeDeVue = 2;
    private ButtonStyle modeDeVuButtonEdition = ButtonStyle.Warning;
    private ButtonStyle modeDeVuButtonPage = ButtonStyle.Primary;
    private ButtonStyle modeDeVuButtonEtudiant = ButtonStyle.Primary;

    private Noeud nouveauNoeud = new();
    public List<Noeud> Nodes { get; set; } = new();

    protected async override void OnInitialized()
    {
        await UpdateGraphe();
    }

    /// <summary>
    /// Permet de set le mode de vu. 1 => Page, 2 => Edit, 3 => Etudiant
    /// </summary>
    /// <param name="v">valeur de la vue</param>
    private void ModeDeVue(int v)
    {
        if (v == 1)
        {
            modeDeVuButtonPage = ButtonStyle.Warning;
            modeDeVuButtonEdition = ButtonStyle.Primary;
            modeDeVuButtonEtudiant = ButtonStyle.Primary;
        }
        else if (v == 2)
        {
            modeDeVuButtonPage = ButtonStyle.Primary;
            modeDeVuButtonEdition = ButtonStyle.Warning;
            modeDeVuButtonEtudiant = ButtonStyle.Primary;
        }
        else
        {
            modeDeVuButtonPage = ButtonStyle.Primary;
            modeDeVuButtonEdition = ButtonStyle.Primary;
            modeDeVuButtonEtudiant = ButtonStyle.Warning;
        }
        modeDeVue = v;
        Console.WriteLine($"Mode de vu : {v}");
    }

    /// <summary>
    /// Permet a tout les noeuds d'adapter leur mode (fonction delegate au noeud et connecteur)
    /// </summary>
    /// <returns></returns>
    private int GetModeDeVue() => modeDeVue;

    /// <summary>
    /// Pour conserver le fond dragable quand en mode "vue etudiant"
    //Hardcode    /// 
    /// </summary>
    /// <returns></returns>
    private int GetModeFond() => 2; 
      
    //Quand la souris survole
    private void OnMouseHover() => displayHover = "show";

    //Quand la souris ne survole plus
    private void OnMouseLeave() => displayHover = "hidden";

    /// <summary>
    /// Detache une page de son noeud
    /// </summary>
    /// <param name="page"></param>
    private void ReLinkPage(Page page)
    {
        Console.WriteLine($"Page {page.PageId} a besoin d'un parent");
        pageRechercheNoeud = page;
        enRecherchePage = true;
    }

    private async Task<bool> ReLinkBindPage(Noeud noeud)
    {
        if (enRecherchePage)
        {
            Console.WriteLine($"Changement de page sur : {noeud.Nom}");

            // Récupère toutes les pages du nœud avant le relink
            var pageNoeudBefore = await PageService.GetAllFromNoeud(noeud.NoeudId);
            var pagesBefore = pageNoeudBefore.Data;
            // Initialise les propriétés de la page de recherche du nœud
            pageRechercheNoeud.NoeudId = noeud.NoeudId;
            if (pagesBefore != null && pagesBefore.Any())
            {
                pageRechercheNoeud.Ordre = pagesBefore.Last().Ordre + 1;
            }
            else
            {
                pageRechercheNoeud.Ordre = 1;
            }

            // Enregistre les changements
            SaveChange(pageRechercheNoeud);
            // Récupère toutes les pages du nœud après le relink
            var pageNoeudAfter = await PageService.GetAllFromNoeud(noeud.NoeudId);
            var pagesAfter = pageNoeudAfter.Data.ToList();
            // Trie les pages en fonction de la propriété Ordre
            pagesAfter = pagesAfter.OrderBy(p => p.Ordre).ToList();
            // Met à jour les valeurs de la propriété Ordre de manière séquentielle
            for (int i = 0; i < pagesAfter.Count(); i++)
            {
                pagesAfter[i].Ordre = i + 1;
                SaveChange(pagesAfter[i]);
            };
            // Met à jour l'affichage
            StateHasChanged();
            enRecherchePage = false;
            return true;
        }
        return false;
    }

    /// <summary>
    /// Permet de rattacher un noeud enfant a un parent clique
    /// </summary>
    /// <param name="noeud"></param>
    private void RelinkBindNode(Noeud noeud)
    {
        if (enRecherche)
        {
            Console.WriteLine($"Changement du parent sur : {noeud.Nom}");
            enfantRechercheParent.NoeudParentId = noeud.NoeudId;
            enRecherche = false;
            SaveChange(enfantRechercheParent);
        }
    }

    /// <summary>
    /// Detache un noeud enfant de son parent
    /// </summary>
    /// <param name="noeud"></param>
    private void ReLinkNoeud(Noeud noeud)
    {
        Console.WriteLine($"Noeud {noeud.Nom} a besoin d'un parent");
        enfantRechercheParent = noeud;
        enRecherche = true;
    }

    /// <summary>
    /// Recupere les noeuds du graph Numero X et permet la MAJ du graph
    /// </summary>
    private async Task UpdateGraphe()
    {
        Nodes = new();
        if (sessionStorage != null)
        {
            int idGraphe = await sessionStorage.GetItemAsync<int>("idGraphe");

            // Attendre 'idGraphe' pour ne pas etre 0 (utilise un timeout ou cancellation token = plus safe).
            while (idGraphe == 0)
            {
                //Plus chill qu'une boucle industrielle
                await Task.Delay(100);
            }

            Nodes = ((APIResponse<IEnumerable<Noeud>>)await NoeudService.GetAllFromGraph(idGraphe)).Data.ToList();

            var response = await NoeudService.GetAllFromGraph(idGraphe);
            Nodes = response.Data.ToList();
            Console.WriteLine("Mise a jour des noeuds du graph");
        }
        StateHasChanged();
    }

    /// <summary>
    /// Permet l'ajout de noveau noeud
    /// </summary>
    private async void AjoutNouveauNoeud(Noeud nouveauNoeud)
    {
        await SaveNouveauNoeud(nouveauNoeud);
        await UpdateGraphe();
    }

    /// <summary>
    /// Supprime le noeud avec l'id selectionner
    /// </summary>
    /// <param name="id"></param>
    private async void SupprimerNoeud(int id)
    {
        var result = await DialogService.Confirm("Êtes-vous sûr de vouloir supprimer ce noeud?", "Supprimer");

        if (result.HasValue && result.Value)
        {
                // Supprimer les pages associées au nœud
                var allPage = await PageService.GetAllFromNoeud(id);
                var pages = allPage.Data;

                if (pages != null)
                {
                    foreach (var pageDelete in pages)
                    {
                        var allComposant = await ComposantService.GetAllById(pageDelete.PageId);
                        var composant = allComposant.Data;

                        if (composant != null)
                        {
                            foreach (var composantDelete in composant)
                            {
                                await ComposantService.Delete(composantDelete.ComposantId);
                            }
                        }
                        await PageService.Delete(pageDelete.PageId);
                    }
                    await NoeudService.Delete(id);
                }

            // Supprimer le graphe
            await GrapheService.Delete(await sessionStorage.GetItemAsync<int>("idGraphe"));
            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/Graphe");
        }
        else
        {
            NavigationManager.NavigateTo("/Graphe");
        }
    }

    /// <summary>
    /// Sauvegarde les mises a jour du graph
    /// </summary>
    public async void SaveChange(Noeud noeud) => await NoeudService.Update(noeud.NoeudId, noeud);
    public async void SaveChange(Page page) => await PageService.Update(page.PageId, page);

    /// <summary>
    /// Ajoute un noeud dans la BD
    /// </summary>
    /// <param name="noeud"></param>
    public async Task SaveNouveauNoeud(Noeud noeud)
    {
        if (noeud != null)
        {
            await NoeudService.Create(noeud);
            Console.WriteLine($"Nouveau noeud : {noeud.Nom}");
        }
    }

    private async void SupprimerGraphe()
    {
        var result = await DialogService.Confirm("Êtes-vous sûr de vouloir supprimer ce graphe?", "Supprimer");

        if (result.HasValue && result.Value)
        {
            var allNoeud = await NoeudService.GetAllFromGraph(await sessionStorage.GetItemAsync<int>("idGraphe"));
            var noeuds = allNoeud.Data;

            foreach (var noeudDelete in noeuds)
            {
                // Supprimer les pages associées au nœud
                var allPage = await PageService.GetAllFromNoeud(noeudDelete.NoeudId);
                var pages = allPage.Data;

                if (pages != null)
                {
                    foreach (var pageDelete in pages)
                    {
                        var allComposant = await ComposantService.GetAllById(pageDelete.PageId);
                        var composant = allComposant.Data;

                        if (composant != null)
                        {
                            foreach (var composantDelete in composant)
                            {
                                await ComposantService.Delete(composantDelete.ComposantId);
                            }
                        }
                        await PageService.Delete(pageDelete.PageId);
                    }
                    await NoeudService.Delete(noeudDelete.NoeudId);
                }
                foreach (var noeudDeleteParent in noeuds)
                {
                    await NoeudService.Delete(noeudDeleteParent.NoeudId);
                }
            }
            // Supprimer le graphe
            await GrapheService.Delete(await sessionStorage.GetItemAsync<int>("idGraphe"));
            NavigationManager.NavigateTo("/");
        }
        else
        {
            NavigationManager.NavigateTo("/Graphe");
        }
    }

    /// <summary>
    /// Reset le zoom a 100%
    /// </summary>
    private void ResetViewbox()
    {
        viewBoxX = 0;
        viewBoxY = 0;
        viewBoxHeight = 2000;
        viewBoxWidth = 2000;
        zoomIncrement = 100;
        AfficheZoom();
    }

    /// <summary>
    /// Augmenter le zoom
    /// </summary>
    private void AugmenterZoom()
    {
        if (zoomIncrement != 150)
        {
            viewBoxX = viewBoxX + 10;
            viewBoxY = viewBoxY + 10;
            viewBoxWidth = viewBoxWidth - 20;
            viewBoxHeight = viewBoxHeight - 20;
            zoomIncrement = zoomIncrement + 1;
            AfficheZoom();
        }
        else
        {
            viewBoxX = viewBoxY;
            viewBoxHeight = viewBoxWidth;
            AfficheZoom();
        }
    }

    /// <summary>
    /// Reduit le zoom
    /// </summary>
    private void ReduireZoom()
    {
        if (zoomIncrement != 0)
        {
            viewBoxX = viewBoxX - 10;
            viewBoxY = viewBoxY - 10;
            viewBoxWidth = viewBoxWidth + 20;
            viewBoxHeight = viewBoxHeight + 20;
            zoomIncrement = zoomIncrement - 1;
            AfficheZoom();
        }
        else
        {
            viewBoxX = viewBoxY;
            viewBoxHeight = viewBoxWidth;
            AfficheZoom();
        }
    }

    /// <summary>
    /// Zoom scroll molette
    /// </summary>
    /// <param name="mouse"></param>
    public void Zoom(WheelEventArgs mouse)
    {
        if (mouse.ShiftKey) // get le shift key
        {
            // Utilisation de mouse.DeltaY pour vérifier la direction du défilement
            if (mouse.DeltaY < 0)
            {
                // Faire zoom vers le haut
                if (zoomIncrement != 150)
                {
                    viewBoxX = viewBoxX + 10;
                    viewBoxY = viewBoxY + 10;
                    viewBoxWidth = viewBoxWidth - 20;
                    viewBoxHeight = viewBoxHeight - 20;
                    zoomIncrement = zoomIncrement + 1;
                    AfficheZoom();
                }
                else
                {
                    viewBoxX = viewBoxY;
                    viewBoxHeight = viewBoxWidth;
                    AfficheZoom();
                }
            }
            else if (mouse.DeltaY > 0)
            {
                // Faire zoom vers le bas
                if (zoomIncrement != 0)
                {
                    viewBoxX = viewBoxX - 10;
                    viewBoxY = viewBoxY - 10;
                    viewBoxWidth = viewBoxWidth + 20;
                    viewBoxHeight = viewBoxHeight + 20;
                    zoomIncrement = zoomIncrement - 1;
                    AfficheZoom();
                }
                else
                {
                    viewBoxX = viewBoxY;
                    viewBoxHeight = viewBoxWidth;
                    AfficheZoom();
                }
            }
        }
    }

    public string AfficheZoom()
    {
        if (zoomIncrement <= 0)
        {
            // Vous pouvez ajuster la valeur selon vos besoins
            return ("0%");
        }
        if (zoomIncrement >= 150)
        {
            return ("150%");
        }
        else
        {
            return (zoomIncrement + "%");
        }
    }
}
