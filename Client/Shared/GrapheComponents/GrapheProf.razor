@using Microsoft.CodeAnalysis;
@using System.Text;
@using STIMULUS_V2.Client.Services;
@using STIMULUS_V2.Client.Shared.NoeudComponents
@using STIMULUS_V2.Shared.Models.DTOs;
@using STIMULUS_V2.Shared.Models.Entities;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using static STIMULUS_V2.Client.Shared.NoeudComponents.Connector;
@using static STIMULUS_V2.Client.Shared.NoeudComponents.NoeudsProf;
@inject INoeudService NoeudService
@inject IGrapheService GrapheService
@inject IPageService PageService
@inject IComposantService ComposantService
@inject MouseService mouseSrv
@inject IUpdateService updateService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntim
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Radzen.DialogService DialogService

<div class="row mt-2">
    <div class="col">
        <foreignObject x="5" y="5" width="1300" height="40">
            <RadzenStack class="divGrapheEntete" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                <RadzenButton Click=AugmenterZoom Text="+" ButtonStyle="ButtonStyle.Secondary" />
                <RadzenButton Click=ReduireZoom Text="-" ButtonStyle="ButtonStyle.Secondary" />
                <RadzenButton Click=ResetViewbox Text="Réinitialisé" Icon="refresh" ButtonStyle="ButtonStyle.Dark" />
                <RadzenLabel style="color: blue;">Zoom: @AfficheZoom()</RadzenLabel>
                <RadzenButton Click=@(args => ModeDeVue(2)) Text="Édition" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Click=@(args => ModeDeVue(1)) Text="Gestion de pages" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Click=@(args => ModeDeVue(3)) Text="Vue étudiante" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Click=SupprimerGraphe Text="Supprimer le graphe" ButtonStyle="ButtonStyle.Danger" style="margin-left: auto;" />
            </RadzenStack>
        </foreignObject>
        <svg class="bg-transparent" width="100%" height="2000" xmlns="http://www.w3.org/2000/svg">
            <foreignObject x="0" y="5" width="180" height="205" style="border-radius: 5px;">
             <RadzenPanel style="background-color: #32587a; padding: 10px;">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                        <RadzenLabel style="color:black;text-decoration: underline;">Légende</RadzenLabel>
                      <RadzenLabel style="color:rgb(140,140,140);">Bloqué</RadzenLabel>
                      <RadzenLabel style="color:rgb(228, 231, 245);">Disponible</RadzenLabel>
                      <RadzenLabel style="color:rgb(199,160,53);">Consulté</RadzenLabel>
                      <RadzenLabel style="color:rgb(88,150,105);">Complété</RadzenLabel>
                </RadzenStack>
            </RadzenPanel>
            </foreignObject>
            <svg class="bg-transparent" width="100%" height="1800" xmlns="http://www.w3.org/2000/svg" viewBox = "@viewBoxX @viewBoxY @viewBoxWidth @viewBoxWidth"
            @onmousemove=@(e => mouseSrv.FireMove(this, e))
            @onmouseup=@(e => mouseSrv.FireUp(this, e))
            @onmousewheel="Zoom">
                <Draggable X="@((viewBoxWidth - 1800) / 2)" Y="@((viewBoxWidth - 1500) / 2)" GetModeDeVue="GetModeFond">
                    <rect x="-1000" y="-1000" width="4000" height="4000" style="fill:rgb(0,0,0,0);stroke-width:0;stroke:rgb(0,0,0)" />
                    @foreach (var noeud in Nodes)
                    {
                        <NoeudsProf UpdateGraphe="UpdateGraphe" GetModeDeVue="GetModeDeVue" RelinkBindNode="RelinkBindNode" ReLinkNoeud="ReLinkNoeud"
                         Node="@noeud" Nodes="@Nodes" SaveChangeNoeud="SaveChange" AjoutNouveauNoeud="AjoutNouveauNoeud" SupprNoeud="SupprimerNoeud"/>
                    }
                </Draggable>
            </svg>
        </svg>
    </div>
</div>
@code {
    private string displayHover = "hidden";
    private double viewBoxX = 0;
    private double viewBoxY = 0;
    private double viewBoxWidth = 2000;
    private double viewBoxHeight = 2000;
    private double zoomIncrement = 100;
    private Noeud enfantRechercheParent = new();
    private bool enRecherche = false;
    private int modeDeVue = 2;
    private string modeDeVuInfo = "Édition";
    private string modeDeVuButtonPage = "btn-info";
    private string modeDeVuButtonEdition = "btn-warning";
    private string modeDeVuButtonEtudiant = "btn-info";

    private Noeud nouveauNoeud = new();
    public List<Noeud> Nodes { get; set; } = new();

    protected async override void OnInitialized()
    {        
        await UpdateGraphe();
    }
    /// <summary>
    /// Permet de set le mode de vu. 1 => Page, 2 => Edit, 3 => Etudiant
    /// </summary>
    /// <param name="v">valeur de la vue</param>
    ///
    private void ModeDeVue(int v) 
    {
        if(v == 1)
        {
            modeDeVuInfo = "Gestion de Pages";
            modeDeVuButtonPage = "btn-warning";
            modeDeVuButtonEdition = "btn-info";
            modeDeVuButtonEtudiant = "btn-info";
        }
        else if(v == 2)
        {
            modeDeVuInfo = "Édition";
            modeDeVuButtonPage = "btn-info";
            modeDeVuButtonEdition = "btn-warning";
            modeDeVuButtonEtudiant = "btn-info";
        }
        else
        {
            modeDeVuInfo = "Vue étudiante";
            modeDeVuButtonPage = "btn-info";
            modeDeVuButtonEdition = "btn-info";
            modeDeVuButtonEtudiant = "btn-warning";
        }
        modeDeVue = v;
        Console.WriteLine($"Mode de vu : {v}");
    }
    /// <summary>
    /// Permet a tout les noeuds d'adapter leur mode (fonction delegate au noeud et connecteur)
    /// </summary>
    /// <returns></returns>
    private int GetModeDeVue() => modeDeVue;
    /// <summary>
    /// Pour conserver le fond dragable quand en mode "vue etudiant"
    /// </summary>
    /// <returns></returns>
    private int GetModeFond() => 2; //Hardcode
                                    //Quand la souris survole
    private void OnMouseHover() => displayHover = "show";
    //Quand la souris ne survole plus
    private void OnMouseLeave() => displayHover = "hidden";
    /// <summary>
    /// Permet de rattacher un noeud enfant a un parent clique
    /// </summary>
    /// <param name="noeud"></param>
    private void RelinkBindNode(Noeud noeud)
    {
        if (enRecherche)
        {
            Console.WriteLine($"Changement du parent sur : {noeud.Nom}");
            enfantRechercheParent.NoeudParentId = noeud.NoeudId;
            enRecherche = false;
            SaveChange(enfantRechercheParent);
        }
    }
    /// <summary>
    /// Detache un noeud enfant de son parent
    /// </summary>
    /// <param name="noeud"></param>
    private void ReLinkNoeud(Noeud noeud)
    {
        Console.WriteLine($"Noeud {noeud.Nom} a besoin d'un parent");
        enfantRechercheParent = noeud;
        enRecherche = true;
    }
    /// <summary>
    /// Recupere les noeuds du graph Numero X et permet la MAJ du graph
    /// </summary>
    private async Task UpdateGraphe()
    {
        Nodes = new();
        if (sessionStorage != null)
        {
            int idGraphe = await sessionStorage.GetItemAsync<int>("idGraphe");

            // Attendre 'idGraphe' pour ne pas etre 0 (utilise un timeout ou cancellation token = plus safe).
            while (idGraphe == 0)
            {
                //Plus chill qu'une boucle industrielle
                await Task.Delay(100);
            }

            Nodes = ((APIResponse<IEnumerable<Noeud>>)await NoeudService.GetAllFromGraph(idGraphe)).Data.ToList();

            // var response = await NoeudService.GetAllFromGraph(idGraphe);
            // Nodes = response.Data.ToList();
            Console.WriteLine("Mise a jour des noeuds du graph");
        }
        StateHasChanged();
    }
    /// <summary>
    /// Permet l'ajout de noveau noeud
    /// </summary>
    private async void AjoutNouveauNoeud(Noeud nouveauNoeud)
    {
        await SaveNouveauNoeud(nouveauNoeud);
        await UpdateGraphe();
    }
    /// <summary>
    /// Supprime le noeud avec l'id selectionner
    /// </summary>
    /// <param name="id"></param>
    private async void SupprimerNoeud(int id)
    {
        await NoeudService.Delete(id);
        await UpdateGraphe();
        Console.WriteLine($"Suppression du noeud : id={id}");
    }
    /// <summary>
    /// Sauvegarde les mises a jour du graph
    /// </summary>
    public async void SaveChange(Noeud noeud) => await NoeudService.Update(noeud.NoeudId, noeud);
    /// <summary>
    /// Ajoute un noeud dans la BD
    /// </summary>
    /// <param name="noeud"></param>
    public async Task SaveNouveauNoeud(Noeud noeud)
    {
        if(noeud != null)
        {
            await NoeudService.Create(noeud);
            Console.WriteLine($"Nouveau noeud : {noeud.Nom}");
        }
    }

    private async void SupprimerGraphe()
    {
        var result = await DialogService.Confirm("Êtes-vous sûr de vouloir supprimer ce graphe?", "Supprimer");

        if (result.HasValue && result.Value)
        {
            var allNoeud = await NoeudService.GetAllFromGraph(await sessionStorage.GetItemAsync<int>("idGraphe"));
            var noeuds = allNoeud.Data;

            foreach (var noeudDelete in noeuds)
            {
                // Supprimer les pages associées au nœud
                var allPage = await PageService.GetAllFromNoeud(noeudDelete.NoeudId);
                var pages = allPage.Data;

                if (pages != null)
                {
                    foreach (var pageDelete in pages)
                    {
                        var allComposant = await ComposantService.GetAllById(pageDelete.PageId);
                        var composant = allComposant.Data;

                        if(composant != null)
                        {
                            foreach (var composantDelete in composant)
                            {
                                await ComposantService.Delete(composantDelete.ComposantId);
                            }
                        }
                        await PageService.Delete(pageDelete.PageId);
                    }
                }
                foreach (var noeudDeleteParent in noeuds)
                {
                    await NoeudService.Delete(noeudDeleteParent.NoeudId);
                }
            }

            // Supprimer le graphe
            await GrapheService.Delete(await sessionStorage.GetItemAsync<int>("idGraphe"));
            NavigationManager.NavigateTo("/");
        }
        else
        {
            NavigationManager.NavigateTo("/Graphe");
        }
    }
    /// <summary>
    /// Reset le zoom a 100%
    /// </summary>
    private void ResetViewbox()
    {
        viewBoxX = 0;
        viewBoxY = 0;
        viewBoxHeight = 2000;
        viewBoxWidth = 2000;
        zoomIncrement = 100;
        AfficheZoom();
    }
    /// <summary>
    /// Augmenter le zoom
    /// </summary>
    private void AugmenterZoom()
    {
        if (zoomIncrement != 150)
        {
            viewBoxX = viewBoxX + 10;
            viewBoxY = viewBoxY + 10;
            viewBoxWidth = viewBoxWidth - 20;
            viewBoxHeight = viewBoxHeight - 20;
            zoomIncrement = zoomIncrement + 1;
            AfficheZoom();
        }
        else
        {
            viewBoxX = viewBoxY;
            viewBoxHeight = viewBoxWidth;
            AfficheZoom();
        }
    }
    /// <summary>
    /// Reduit le zoom
    /// </summary>
    private void ReduireZoom()
    {
        if (zoomIncrement != 0)
        {
            viewBoxX = viewBoxX - 10;
            viewBoxY = viewBoxY - 10;
            viewBoxWidth = viewBoxWidth + 20;
            viewBoxHeight = viewBoxHeight + 20;
            zoomIncrement = zoomIncrement - 1;
            AfficheZoom();
        }
        else
        {
            viewBoxX = viewBoxY;
            viewBoxHeight = viewBoxWidth;
            AfficheZoom();
        }
    }
    /// <summary>
    /// Zoom scroll molette
    /// </summary>
    /// <param name="mouse"></param>
    public void Zoom(WheelEventArgs mouse)
    {
        if (mouse.ShiftKey) // get le shift key
        {
            // Utilisation de mouse.DeltaY pour vérifier la direction du défilement
            if (mouse.DeltaY < 0)
            {
                // Faire zoom vers le haut

                if (zoomIncrement != 150)
                {
                    viewBoxX = viewBoxX + 10;
                    viewBoxY = viewBoxY + 10;
                    viewBoxWidth = viewBoxWidth - 20;
                    viewBoxHeight = viewBoxHeight - 20;
                    zoomIncrement = zoomIncrement + 1;
                    AfficheZoom();
                }
                else
                {
                    viewBoxX = viewBoxY;
                    viewBoxHeight = viewBoxWidth;
                    AfficheZoom();
                }
            }
            else if (mouse.DeltaY > 0)
            {
                // Faire zoom vers le bas

                if (zoomIncrement != 0)
                {
                    viewBoxX = viewBoxX - 10;
                    viewBoxY = viewBoxY - 10;
                    viewBoxWidth = viewBoxWidth + 20;
                    viewBoxHeight = viewBoxHeight + 20;
                    zoomIncrement = zoomIncrement - 1;
                    AfficheZoom();
                }
                else
                {
                    viewBoxX = viewBoxY;
                    viewBoxHeight = viewBoxWidth;
                    AfficheZoom();
                }
            }
        }
    }
    public string AfficheZoom()
    {
        if (zoomIncrement <= 0)
        {
            // Vous pouvez ajuster la valeur selon vos besoins
            return ("0%");
        }
        if (zoomIncrement >= 150)
        {
            return ("150%");
        }
        else
        {
            return (zoomIncrement + "%");
        }
    }

}
