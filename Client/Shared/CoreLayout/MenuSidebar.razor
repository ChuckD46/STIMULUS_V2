@using STIMULUS_V2.Client.Services;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.Authentication;
@using Blazored.LocalStorage;
@using STIMULUS_V2.Shared.Models.Entities;

@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject TooltipService tooltipService
@inject NavigationManager NavigationManager
@inject IGrapheService GrapheService
@inject ILocalStorageService localStorageService
@inject IGroupeService GroupeService
@inject ICoursService CoursService
@inject IGroupeEtudiantService GroupeEtudiantService
@inject AppState State;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RerenderService Rerender

<RadzenSidebar Responsive="true" Style="width: max-content">
    <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="@sidebarExpanded">
        <RadzenPanelMenuItem Text="Accueil" Icon="home" Path="/" />
        <AuthorizeView Roles="ETUDIANT">
            @foreach (var cours in ListeCours)
            {
                @foreach (var graphe in ListeGraphesEtudiant)
                {
                    <RadzenPanelMenuItem Icon="account_tree" Text="@cours.Code" Click="(() => ChargerGraphe(graphe.GrapheId))"></RadzenPanelMenuItem>
                }
            }
        </AuthorizeView>
        <AuthorizeView Roles="PROFESSEUR">
            <RadzenPanelMenuItem Text="Gestion de Graphe" Icon="account_tree">
                @foreach (var graphe in ListeGraphesProf)
                {
                    <RadzenPanelMenuItem Icon="build" Text="@graphe.Nom" Click="(() => ChargerGraphe(graphe.GrapheId))"></RadzenPanelMenuItem>
                }
                <RadzenPanelMenuItem Text="Créer un nouveau Graphe" Icon="input" Path="/CreerGraphe" />
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Gestion de Groupe" Icon="assignment_ind">
                @foreach (var groupe in groupesProf)
                {
                    <RadzenPanelMenuItem Icon="face" Text="@groupe.Nom" Click="(() => ChargerGroupe(groupe.GroupeId))"></RadzenPanelMenuItem>
                }
                <RadzenPanelMenuItem Text="Créer un nouveau Groupe" Icon="input" Path="/CreerGroupe" />
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Gestion de Cours" Icon="chrome_reader_mode">
                <RadzenPanelMenuItem Text="Créer un nouveau Cours" Icon="input" Path="/CreerCours" />
            </RadzenPanelMenuItem>
        </AuthorizeView>
        <AuthorizeView Roles="ADMIN">
            <RadzenPanelMenuItem Text="Ajouter un utiliateur" Icon="person_add" Path="/AjouterUtilisateur" />
        </AuthorizeView>
    </RadzenPanelMenu>
</RadzenSidebar>


@code {
    [Parameter]
    public bool sidebarExpanded { get; set; } = false;
    public List<STIMULUS_V2.Shared.Models.Entities.Graphe> ListeGraphesProf { get; set; } = new List<STIMULUS_V2.Shared.Models.Entities.Graphe>();
    public List<STIMULUS_V2.Shared.Models.Entities.Graphe> ListeGraphesEtudiant { get; set; } = new List<STIMULUS_V2.Shared.Models.Entities.Graphe>();
    public List<STIMULUS_V2.Shared.Models.Entities.Cours> ListeCours { get; set; } = new List<Cours>();
    public List<STIMULUS_V2.Shared.Models.Entities.Groupe> groupesProf { get; set; } = new List<STIMULUS_V2.Shared.Models.Entities.Groupe>();

    protected async override void OnInitialized()
    {
        await SideBarData();
        Rerender.OnGroupeCreated += HandleUpdateSideBar;
        Rerender.OnGrapheCreated += HandleUpdateSideBar;
        Rerender.OnGrapheDelete += HandleUpdateSideBar;
    }

    public async Task SideBarData()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var isProfesseur = user.IsInRole("PROFESSEUR");
        var isEtudiant = user.IsInRole("ETUDIANT");
        groupesProf.Clear();
        ListeGraphesProf.Clear();

        if (isProfesseur)
        {
            if (await sessionStorage.GetItemAsync<string>("idConnexion") != null)
            {
                var responseGroupeActif = await GroupeService.GetAllGroupActif(await sessionStorage.GetItemAsync<string>("idConnexion"));
                var groupesActif = responseGroupeActif.Data;

                groupesProf.AddRange(groupesActif);

                foreach (var graphe in groupesActif)
                {
                    var responseGraphe = await GrapheService.GetAllFromGroup(graphe.GroupeId);
                    var graphesDuGroupe = responseGraphe.Data;

                    ListeGraphesProf.AddRange(graphesDuGroupe);
                }
                StateHasChanged();
            } 
        }

        if (isEtudiant)
        {
            if (await sessionStorage.GetItemAsync<string>("idConnexion") != null)
            {
                var responseGroupeEtudiant = await GroupeEtudiantService.GetAllGroupForStudent(await sessionStorage.GetItemAsync<string>("idConnexion"));
                var groupes = responseGroupeEtudiant.Data;

                foreach (var groupe in groupes)
                {
                    var responseGraphe = await GrapheService.GetAllFromGroup((int)groupe.GroupeId);
                    var graphesDuGroupe = responseGraphe.Data;

                    ListeGraphesEtudiant.AddRange(graphesDuGroupe);
                }

                foreach (var cours in groupes)
                {
                    var responseCours = await CoursService.GetAllById((int)cours.GroupeId);
                    var nomDesCours = responseCours.Data;

                    ListeCours.AddRange(nomDesCours);
                }
                StateHasChanged();
            }
        }
    }
    private async void HandleUpdateSideBar()
    {
        await SideBarData();
        StateHasChanged();
    }

    public async Task ChargerGraphe(int idGraphe)
    {
        await sessionStorage.SetItemAsync<int>("idGraphe", idGraphe);
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo("/Graphe");
    }

    public async Task ChargerGroupe(int idGroupe)
    {
        await sessionStorage.SetItemAsync<int>("idGroupe", idGroupe);
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo("/Groupe");
    }
}
