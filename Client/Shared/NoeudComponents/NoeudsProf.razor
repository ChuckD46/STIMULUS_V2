@using STIMULUS_V2.Client.Services;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.Entities;
@inject IJSRuntime JSRuntime

@* @using STIMULUS_V2.Client.Shared.TheorieComponents; *@
@using static STIMULUS_V2.Client.Shared.NoeudComponents.Connector;
@inject Radzen.DialogService RadzenDialogService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject INoeudService NoeudService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRunTime
@inject IPageService PageService
@inject IComposantService ComposantService
@inject AppState State;

@for (int i = 0; i < Nodes.Count; i++)
{
    @if (Node.NoeudId == Nodes[i].NoeudParentId && Nodes[i].NoeudParentId != null && Nodes[i].NoeudParentId != Nodes[i].NoeudId)
    {
        <Connector ReRender="ReRender" GetModeDeVue="GetModeDeVue" SaveChangeNoeud="SaveChangeNoeud" Noeud="Nodes[i]" X1=Node.PosX Y1=Node.PosY X2=Nodes[i].PosX Y2=Nodes[i].PosY />
    }
}
<Draggable GetModeDeVue="GetModeDeVue" @bind-X=Node.PosX @bind-Y=Node.PosY>

    <circle visibility="@displayHover" r="@(Node.Rayon + 3)" class="cercle" style="fill: rgba(255,255,255,5); opacity:0.5" />
    @if (GetModeDeVue() == 1 && pageLink == true)
    {
        <circle @onmouseover=@(e => OnMouseHover()) @onclick="@(e => ReLinkPage(Node.NoeudId))" r="@Node.Rayon" class="cercle" style="fill:@Couleur" />
    }
    @if (GetModeDeVue() == 2)
    {
        <circle @onmouseup=@(e => SaveChangeNoeud(Node)) @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) @onclick="(e => RelinkBindNode(Node))" r="@Node.Rayon" class="cercle" style="fill:@Couleur" />
    }
    @if (GetModeDeVue() == 2 || GetModeDeVue() == 3)
    {
        <rect x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="fill: rgba(255,255,255,255)" />
        <foreignObject x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="padding:5px">
            <span> Nom :  @Node.Nom </span><br />
            <span>Parent : @TestParent()</span><br /> @*Pour ne pas avoir de champ vide*@
            <span> Desc : @Node.Description</span>
        </foreignObject>
    }
    @if (GetModeDeVue() == 2)
    {
        @if (Nodes.Where(c => c.NoeudParentId == Node.NoeudId).ToList().Count == 0 || Node.NoeudId == Node.NoeudParentId)
        {
            <foreignObject x="@(-Node.Rayon )" y="@(-Node.Rayon )" width="20" height="20">
                <span id="deleteNoeud" title="Supprimer le noeud @Node.Status" class="oi oi-circle-x" aria-hidden="true" @onclick="@SupprimerNoeud"></span>
            </foreignObject>
        }
        @if (Node.NoeudParentId == null || Node.NoeudId == Node.NoeudParentId)
        {
            <foreignObject x="@((-Node.Rayon) )" y="@((Node.Rayon)/2 )" width="20" height="20">
                <span class="oi oi-link-broken" id="reLink" @onclick="(e => ReLinkNoeud(Node))"></span>
            </foreignObject>
        }
        <foreignObject x="@(Node.Rayon/2 )" y="@(Node.Rayon/2 )" width="20" height="20">
            @if (!isOpen)
            {
                <span title="Ajouter un nouveau noeud a @Node.Nom" id="addNoeud" class="oi oi-plus" aria-hidden="true" @onclick="@NouveauNoeud"></span>
            }
            else
            {
                <span title="Ajouter un nouveau noeud a @Node.Nom" id="addNoeud" class="oi oi-minus" aria-hidden="true" @onclick="@FermeForm"></span>
            }
        </foreignObject>
        <rect x="@(Node.Rayon/2 + 20)" y="@(Node.Rayon/2 + 20)" visibility="@displayNouveauNoeud" width="@formSizeW" height="@formSizeH" style="fill: rgba(0, 0, 0, 0.5); stroke: black; stroke-width: 1; rx: 10; ry: 10;" />
        <foreignObject x="@(Node.Rayon/2 +20 )" y="@(Node.Rayon/2 +20)" visibility="@displayNouveauNoeud" width="@formSizeW" height="@formSizeH" style="padding:5px">
            <EditForm Model="nouveauNoeud" OnSubmit="AjoutNoeud" visibility="@displayNouveauNoeud" class="formLogin">
                <div class="form-group">
                    <label for="nomNoeud"><h5>Nom du noeud :</h5></label>
                    <InputText type="text" class="form-control" id="nomNoeud" @bind-Value="nouveauNoeud.Nom" />
                </div>
                <div class="form-group">
                    <label for="description"><h5>Description :</h5></label>
                    <InputTextArea type="text" class="form-control" id="description" @bind-Value="nouveauNoeud.Description" />
                </div>
                <div class="form-group">
                    <label for="rayon"><h5>Rayon :</h5></label>
                    <InputNumber type="number" class="form-control" id="rayon" min="40" max="80" placeholder="40" @bind-Value="nouveauNoeud.Rayon" />
                </div>
                <div class="form-group">
                    <label for="status"><h5>Status :</h5></label>
                    <select class="form-control" id="status" @bind="nouveauNoeud.Status">
                        <option value="1" selected="@(nouveauNoeud.Status == 1)">Bloqué</option>
                        <option value="2" selected="@(nouveauNoeud.Status == 2)">Non consulté</option>
                        <option value="3" selected="@(nouveauNoeud.Status == 3)">Consulté</option>
                        <option value="4" selected="@(nouveauNoeud.Status == 4)">Complété</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="modelNoeud"><h5>Modèle de Noeud :</h5></label>
                    <select class="form-control" id="modelNoeud" @bind="modelNoeud">
                        <option value="Noeud_Contenu" selected="@(modelNoeud == "CONTENU")">Noeud Contenu</option>
                        <option value="Noeud_Structure" selected="@(modelNoeud == "STRUCTURE")">Noeud Structure</option>
                    </select>
                </div>
                <div class="form-group" style="text-align: center;">
                    <button style="margin-top: 10px" type="submit" class="btn btn-primary btn-lg w-100">Ajouter</button>
                </div>
            </EditForm>
        </foreignObject>
    }
    @if (GetModeDeVue() == 1)
    {
        <NavLink @onclick="ViewPageTemplate">
            <circle r="@Node.Rayon" class="cercle" style="fill:@Couleur" />
            <foreignObject x="@(Node.Rayon/2 )" y="@(Node.Rayon/2 )" width="20" height="20">
                <span title="Ajouter une nouvelle page à @Node.Nom" id="addPage" class="oi oi-plus" aria-hidden="true" @onclick="@(args => AjoutPage(Node.NoeudId))"></span>
            </foreignObject>
            <text @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) class="textLink" text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
        </NavLink>
        if (viewPage)
        {
            int offsetX = 0;
            int offsetY = 0;

            @foreach (var pageAffichage in listePage)
            {
                <rect x="@(Node.Rayon * 2 - Node.Rayon / 2 - 10 + offsetX)" y="@(-180 + Node.Rayon / 2 + offsetY)" width="85" height="105" style="fill: rgba(255,255,255,255); stroke: black; stroke-width: 2;" />
                <foreignObject x="@(Node.Rayon * 2 - Node.Rayon / 2 - 10 + offsetX + 80)" y="@(-180 + Node.Rayon / 2 + offsetY - 12)" width="20" height="20">
                    <span id="deletePage" title="Supprimer la page @pageAffichage.Ordre" class="oi oi-circle-x" aria-hidden="true" @onclick="@(e => SupprimerPage(pageAffichage.PageId))"></span>
                </foreignObject>
                <foreignObject x="@(Node.Rayon * 2 - Node.Rayon / 2 - 10 + offsetX - 15)" y="@(-180 + Node.Rayon / 2 + offsetY + 87)" width="20" height="20">
                    <span id="AssocierPage" title="Réarranger la page @pageAffichage.PageId" class="oi oi-action-undo" aria-hidden="true" @onclick="@(e => ReLinkPage(pageAffichage.PageId))"></span>
                </foreignObject>
                <foreignObject @onclick="@(e => DirectionPage(pageAffichage.PageId))" x="@(Node.Rayon * 2 - Node.Rayon / 2 - 10 + offsetX)" y="@(-180 + Node.Rayon / 2 + offsetY)" width="70" height="110" style="padding:5px;">
                    <span>#@pageAffichage.Ordre</span>
                </foreignObject>

                offsetX += 30;
                offsetY += 30;
            }
        }
    }
    else if (GetModeDeVue() == 2)
    {
        <NavLink>
            <text @onclick=@(e => RelinkBindNode(Node)) @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) class="textLink" text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
        </NavLink>
    }
    else if (GetModeDeVue() == 3)
    {
        <NavLink @onclick="DirectionPages">
            <circle @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) @onclick="(e => RelinkBindNode(Node))" r="@Node.Rayon" class="cercle" style="fill:@Couleur" />
            <text @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) class="textLink" text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
        </NavLink>
    }
</Draggable>
@code {
    private bool delete = false;
    //ChildContent = Noeudception
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public Noeud Node { get; set; }
    [Parameter] public Page newPage { get; set; } = new();
    [Parameter] public Page LinkedPage { get; set; } = new();
    [Parameter] public List<Noeud> Nodes { get; set; }
    //Delegate Land
    [Parameter] public Action<Noeud> AjoutNouveauNoeud { get; set; }
    [Parameter] public Action<int> SupprNoeud { get; set; }
    [Parameter] public Action<Noeud> SaveChangeNoeud { get; set; }
    [Parameter] public Action<Noeud> RelinkBindNode { get; set; }
    [Parameter] public Action<Noeud> ReLinkNoeud { get; set; }
    [Parameter] public Func<int> GetModeDeVue { get; set; }
    [Parameter] public Func<Task> UpdateGraphe { get; set; }
    private string displayHover = "hidden";
    private bool viewPage = false;
    //Type de noeud
    private string modelNoeud = "CONTENU";
    private string statusNom = "";
    private Noeud nouveauNoeud = new();
    private string displayNouveauNoeud = "hidden";
    private int formSizeH = 0;
    private int formSizeW = 0;
    private bool isOpen = false;
    private bool pageLink = false;
    //Variable couleurs
    private readonly string COULEUR_BLOQUER = "rgb(140,140,140)";
    private readonly string COULEUR_NON_CONSULTER = "rgb(228, 231, 245)";
    private readonly string COULEUR_CONSULTER = "rgb(199,160,53)";
    private readonly string COULEUR_COMPLETER = "rgb(28, 90, 47)";
    private string Couleur { get; set; }
    public List<Page> listePage { get; set; } = new List<Page>();

    protected override async Task OnInitializedAsync()
    {
        Couleur = COULEUR_BLOQUER;

        if (Node.Status == 1)
        {
            Couleur = COULEUR_BLOQUER;
        }
        else if (Node.Status == 2)
        {
            Couleur = COULEUR_NON_CONSULTER;
        }
        else if (Node.Status == 3)
        {
            Couleur = COULEUR_CONSULTER;
        }
        else if (Node.Status == 4)
        {
            Couleur = COULEUR_COMPLETER;
        }
        var pageNoeud = await PageService.GetAllFromNoeud(Node.NoeudId);
        var affichPage = pageNoeud.Data;

        listePage.AddRange(affichPage);

        ReRender();
    }
    private async void ViewPageTemplate()
    {
        if (!viewPage)
        {

            viewPage = true;
        }
        else
        {
            viewPage = false;
        }
    }
    /// <summary>
    /// (Visuel) permet de check si le noeud a un parent, et l'affiche dans le bulle d'info du noeud
    /// </summary>
    /// <returns></returns>
    private string TestParent() => (Node.NoeudParentId != null && Node.NoeudParentId != Node.NoeudId) ? Node.NoeudParentId.ToString() : "Aucun";
    /// <summary>
    /// Quand le formulaire d'ajout est valide, ajoute un noeud
    /// </summary>
    private async void AjoutNoeud()
    {
        displayNouveauNoeud = "hidden";
        formSizeW = 0;
        formSizeH = 0;
        nouveauNoeud.GrapheId = await sessionStorage.GetItemAsync<int>("idGraphe");
        nouveauNoeud.PosX = Node.PosX;
        nouveauNoeud.PosY = Node.PosY + 180;
        nouveauNoeud.NoeudParentId = Node.NoeudId;
        nouveauNoeud.Obligatoire = true;
        nouveauNoeud.Disponibilite = DateTime.Now;

        if (nouveauNoeud.Nom != null && nouveauNoeud.Description != null && nouveauNoeud.Nom.Length >= 3 && nouveauNoeud.Nom.Length <= 10 && nouveauNoeud.Description.Length >= 3 && nouveauNoeud.Description.Length <= 100 && nouveauNoeud.Rayon != null)
        {
            AjoutNouveauNoeud(nouveauNoeud);
        }
        else
            await JsRunTime.InvokeAsync<object>("alert", "Les saisies ne sont pas valides");
        // Dans le cadre de champs vide ou invalide, une alert box apparait
        nouveauNoeud = new();

        isOpen = false;
    }
    private async void AjoutPage(int id)
    {
        var pageNoeud = await PageService.GetAllFromNoeud(id);
        var create = pageNoeud.Data;

        if (create  != null)
        {
            newPage.NoeudId = id;
            newPage.ImportanceId = 1;
            newPage.Ordre = create.Count() + 1;
            await PageService.Create(newPage);
        }
        else
        {
            newPage.NoeudId = id;
            newPage.ImportanceId = 1;
            newPage.Ordre = 1;
            await PageService.Create(newPage);
        }

        ReRender();
    }
    /// <summary>
    /// Appel la fonction en delegate de suppression de noeud
    /// </summary>
    private void SupprimerNoeud()
    {
        SupprNoeud(Node.NoeudId);
    }
    /// <summary>
    /// Affiche le formulaire pour un nouveau noeud
    /// </summary>
    private void NouveauNoeud()
    {
        //Base du nouveau noeud
        formSizeW = 250;
        formSizeH = 480;
        displayNouveauNoeud = "visible";
        isOpen = true;
    }
    /// <summary>
    /// Rend le formulaire d'ajout de noeud invisible
    /// </summary>
    private void FermeForm()
    {
        formSizeW = 0;
        formSizeH = 0;
        displayNouveauNoeud = "hidden";
        isOpen = false;
    }
    private async void DeLinkPage(int id)
    {
        LinkedPage.PageId = id;
        pageLink = true;

        var pageDelete = await PageService.Get(id);
        var page = pageDelete.Data;

        var allPages = await PageService.GetAllById(Node.NoeudId);
        var pages = allPages.Data;

        foreach (var reOrdered in pages)
        {
            if (page.Ordre < reOrdered.Ordre)
            {
                reOrdered.Ordre = reOrdered.Ordre - 1;
                await PageService.Update(reOrdered.PageId, reOrdered);
            }
        }
    }

    private async void ReLinkPage(int id)
    {
        var pageNoeud = await PageService.GetAllFromNoeud(id);
        var relink = pageNoeud.Data;



        LinkedPage.NoeudId = id;
        LinkedPage.Ordre = relink.Count() + 1;
        LinkedPage.ImportanceId = null;
        await PageService.Update(LinkedPage.PageId, LinkedPage);
    }

    private async void SupprimerPage(int id)
    {
        await PageService.Delete(id);
        ReRender();
    }
    /// <summary>
    /// Quand on survole un noeud, ses elements lies apparaissent
    /// </summary>
    private void OnMouseHover() => displayHover = "visible";
    /// <summary>
    /// Quand on survole plus un noeud, ses elements lies apparaissent disparait
    /// </summary>
    private void OnMouseLeave() => displayHover = "hidden";
    /// <summary>
    /// Permet de refaire de rendu d'un composant
    /// </summary>
    private void ReRender()
    {
        StateHasChanged();
    }
    /// <summary>
    /// Permet le changement de page en fonction du noeud choisis
    /// </summary>
    private async Task DirectionPages()
    {
        await sessionStorage.SetItemAsync<int>("idNoeud", Node.NoeudId);
        NavigationManager.NavigateTo("/ModifierPages");
    }
    private async void DirectionPage(int id)
    {
        var getPage = await PageService.Get(id);
        var pageNoeud = getPage.Data;


        await sessionStorage.SetItemAsync<int>("idPage", id);
        await sessionStorage.SetItemAsync<int>("idNoeud", (int)pageNoeud.NoeudId);
        NavigationManager.NavigateTo("/ModifierPage");
    }
}