@using STIMULUS_V2.Client.Services;
@using STIMULUS_V2.Shared.Models.Entities;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using static STIMULUS_V2.Client.Shared.NoeudComponents.Connector;

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject INoeudService NoeudService;
@inject INoeudEtudiantService NoeudEtudiantService;
@inject IPageService PageService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRunTime
@inject RerenderService Rerender


@for (int i = 0; i < Nodes.Count; i++)
{
    @if (Node.NoeudId == Nodes[i].NoeudParentId && Nodes[i].NoeudParentId != null)
    {
        <Connector GetModeDeVue="GetModeVue" X1=Node.PosX Y1=Node.PosY X2=Nodes[i].PosX Y2=Nodes[i].PosY />
    }
}

<NonDraggable @bind-X=Node.PosX @bind-Y=Node.PosY>
    @if (Node.Status == 1 && Node.Type == NoeudType.STRUCTURE || Node.Type == NoeudType.STRUCTURE || Node.Status == 1 || Node.Status == 5)
    {
        <NavLink id="lien">
            <circle visibility="@displayHover" r="@(Node.Rayon + 3)" class="cercle" style="fill: rgba(255,255,255,5); opacity:0.5" />
            <circle @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) r="@Node.Rayon" class="cercle" style="fill:@Couleur" />
            <rect x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="fill: rgba(255,255,255,255)" />
            <foreignObject x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="padding:5px">
                <span> Nom :  @Node.Nom / ID : @Node.NoeudId</span><br />
                <span> Parent : @TestParent()</span><br /> @*Pour ne pas avoir de champ vide*@
                <span> Desc : @Node.Description</span>
            </foreignObject>
            <text @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
        </NavLink>
    }
    else
    {
        <NavLink @onclick="DirectionPage" id="lien">
            <circle visibility="@displayHover" r="@(Node.Rayon + 3)" class="cercle" style="fill: rgba(255,255,255,5); opacity:0.5" />
            <circle @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) r="@Node.Rayon" class="cercle" style="fill:@Couleur" />
            <rect x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="fill: rgba(255,255,255,255)" />
            <foreignObject x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="padding:5px">
                <span> Nom :  @Node.Nom / ID : @Node.NoeudId</span><br />
                <span> Parent : @TestParent()</span><br /> @*Pour ne pas avoir de champ vide*@
                <span> Desc : @Node.Description</span>
            </foreignObject>
            <text @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
        </NavLink>
    }
                              
</NonDraggable>

@code {
    [Parameter]
    public EventCallback OnNoeudStatus { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public Noeud Node { get; set; }
    [Parameter] public List<Noeud> Nodes { get; set; }
    [Parameter] public Action<int> UnlockChild { get; set; }

    private Noeud_Etudiant noeudEtudiant { get; set; }
    private string link;
    private string displayHover = "hidden";
    private string modelNoeud = "Noeud_Contenue";
    private Noeud nouveauNoeud = new();  
    private string Couleur { get; set; }
    private string displayNouveauNoeud = "hidden";
    private int formSizeH = 0;
    private int formSizeW = 0;
    private bool isOpen = false;
    private readonly string COULEUR_BLOQUER = "rgb(140,140,140)";
    private readonly string COULEUR_NON_COMPLETER = "rgb(255, 55, 55)";
    private readonly string COULEUR_EN_COURS = "rgb(255,243,64)";
    private readonly string COULEUR_COMPLETER = "rgb(74, 191, 51)";

    private int GetModeVue() => -1;
    protected override async Task OnInitializedAsync()
    {

        var etudiantData = await NoeudEtudiantService.GetByNoeudId(Node.NoeudId);

        if (etudiantData != null)
        {
            noeudEtudiant = etudiantData.Data;
            CheckStatus();
        }
    }

    private string TestParent() => (Node.NoeudParentId != null) ? Node.NoeudParentId.ToString() : "Aucun";
    private void OnMouseHover() => displayHover = "visible";

    private void OnMouseLeave()
    {
        displayHover = "hidden";
    }

    private async void DirectionPage()
    {
        await sessionStorage.SetItemAsync<int>("idNoeud", Node.NoeudId);

        // Récupérer toutes les pages associées au nœud actuel
        var pageNoeud = await PageService.GetAllFromNoeud(Node.NoeudId);
        var affichPage = pageNoeud.Data;

        if (affichPage != null && affichPage.Any())
        {
            // Trouver la page avec l'ordre minimum (la première page)
            var firstPage = affichPage.OrderBy(p => p.Ordre).First();

            // Stocker l'ID de la première page dans la session
            noeudEtudiant.Status = 3;
            CheckStatus();
            await NoeudEtudiantService.Update(noeudEtudiant.Noeud_EtudiantId, noeudEtudiant);
            await sessionStorage.SetItemAsync<int>("idPage", firstPage.PageId);
        }
        else
        {
            await sessionStorage.RemoveItemAsync("idPage");
        }
        NavigationManager.NavigateTo("/Pages");
    }

    private async void CheckStatus()
    {
        try
        {
           // Récupérer tous les nœuds enfants du nœud parent
            var childrenNodesResponse = await NoeudService.GetAllById((int)noeudEtudiant.NoeudId);

            // Vérifiez la réponse avant d'entrer dans la boucle foreach
                var childrenNodes = childrenNodesResponse.Data;

                // Parcourir les nœuds enfants
                foreach (var childNode in childrenNodes)
                {
                    var childNoeudEtudiant = await NoeudEtudiantService.GetByNoeudId(childNode.NoeudId);

                    if (childNoeudEtudiant.Data != null)
                    {
                        // Utilisez le statut du parent pour mettre à jour le statut des enfants
                        if (noeudEtudiant.Status == 2) // Non complété
                        {
                            childNoeudEtudiant.Data.Status = 5; // Bloqué
                        }
                        else if (noeudEtudiant.Status == 4) // Complété
                        {
                            childNoeudEtudiant.Data.Status = 2; //Non Complété
                        }
                        else if (noeudEtudiant.Status == 5 || noeudEtudiant.Status == 3 || noeudEtudiant.Status == 1) // En cours ou Bloqué
                        {
                            childNoeudEtudiant.Data.Status = 5; // Bloqué
                        }

                        // Mettez à jour le statut pour chaque Noeud_Etudiant
                        await NoeudEtudiantService.Update(childNoeudEtudiant.Data.Noeud_EtudiantId, childNoeudEtudiant.Data);
                    }
                }

                // Mettre à jour les couleurs des enfants en fonction de leur nouveau statut
                UpdateChildrenColors();            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex}");
        }

        // Mettre à jour l'interface utilisateur
        StateHasChanged();
    }

    private void UpdateChildrenColors()
    {
        // Mettez à jour les couleurs des enfants en fonction de leur statut
        // Vous pouvez utiliser une logique similaire à celle que vous avez utilisée dans OnInitializedAsync()

        foreach (var childNode in Nodes)
        {
            // Vérifiez si le nœud est un enfant du nœud actuel
            if (childNode.NoeudParentId == noeudEtudiant.NoeudId)
            {
                if (noeudEtudiant.Status == 1)
                {
                    Couleur = COULEUR_BLOQUER;
                }
                else if (noeudEtudiant.Status == 2)
                {
                    Couleur = COULEUR_NON_COMPLETER;
                }
                else if (noeudEtudiant.Status == 3)
                {
                    Couleur = COULEUR_EN_COURS;
                }
                else if (noeudEtudiant.Status == 4)
                {
                    Couleur = COULEUR_COMPLETER;
                }
                else if (noeudEtudiant.Status == 5)
                {
                    //Status 5 sera le status bloquer car le noeud parent n'est pas terminé
                    Couleur = COULEUR_BLOQUER;
                }
            }
        }
    }
}
