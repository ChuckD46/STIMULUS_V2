@using Radzen.Blazor.Rendering;
@using STIMULUS_V2.Client.Shared.TheoryComponent
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.Entities;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRunTime
@inject IPageService PageService
@inject IComposantService ComposantService
@inject INoeudService NoeudService
@inject IVideoService VideoService
@inject ITexteFormaterService TexteService
@inject IImageService ImageService
@inject ICodeService CodeService
@inject IExerciceService ExerciceService
@inject IReferenceService ReferenceService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime

@page "/ModifierPage"

    <RadzenBody>
        <RadzenCard Class="rz-my-12 mx-auto" Style="max-width: 1500px; margin : 30px">
            <RadzenText TextStyle="TextStyle.H6" Class="text-center" Style="margin-top:20px;margin-bottom:10px; text-decoration: underline"><strong>Édition</strong></RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" Class="rz-p-4">
                <RadzenImage Path="/RessourceVisuel/editpencil.png" Style="width: 100px; height: 100px; border-radius: 50%;" />
                <RadzenStack Gap="2">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Noeud</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@((noeud.Nom != null) ? noeud.Nom : "")</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Page</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@((page.Ordre != null) ? "#" + page.Ordre : "")</b></RadzenText>
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0">
            <RadzenButton @ref=button ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Ajouter un composant" Click="@(args => popup.ToggleAsync(button.Element))" />
            <Popup @ref=popup Lazy=true Open="@OnOpen"
                   Style="display:none;position:absolute;height:400px;width:400px;padding:5px;border:var(--rz-panel-border);background-color:var(--rz-panel-background-color); text-align: center;">
                <!-- Reste du code inchangé -->

                <EditForm Model="composant" OnSubmit="@AddComposant">
                    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
                        <RadzenColumn Class="mx-auto">
                            <!-- Ajouter la classe "mx-auto" pour centrer horizontalement le contenu -->
                            <RadzenStack>
                                <RadzenFieldset Text="Créer un nouveau composant">
                                    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical">
                                        <RadzenRow AlignItems="AlignItems.Center" Style="width: 300px;">
                                            <RadzenColumn Size="12" SizeMD="4">
                                                <RadzenLabel Text="Type de composant" />
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="8">
                                                <RadzenDropDown @bind-Value="typeComposant" Placeholder="Type" Data="types" Style="width: 200px;" Name="Type">
                                                </RadzenDropDown>
                                            </RadzenColumn>
                                        </RadzenRow>




                                        @if (typeComposant == "Video")
                                        {
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="URL de la vidéo" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="urlVideo" Style="width: 200px;" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Description" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="descriptionVideo" Style="width: 200px;" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                        }


                                        @if (typeComposant == "Texte")
                                        {
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Contenu" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="contenuTexte" Style="width: 200px;" />
                                                </RadzenColumn>
                                            </RadzenRow>
   
                                        }


                                        @if (typeComposant == "Reference")
                                        {
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="URL de la référence" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="urlVideo" Style="width: 200px;" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Description" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="descriptionVideo" Style="width: 200px;" />
                                                </RadzenColumn>
                                            </RadzenRow>

                                        }
                                        @if (typeComposant == "Image")
                                        {
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="URL de l'image" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="urlImage" Style="width: 200px;" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Description" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="descriptionImage" Style="width: 200px;" />
                                                </RadzenColumn>
                                            </RadzenRow>

                                        }


                                        @if (typeComposant == "Exercice")
                                        {
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Solution" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="solutionExercice" Style="width: 200px;" /> @* TEMPORAIRE *@
                                                </RadzenColumn>
                                            </RadzenRow>

                                        }

                                        @if (typeComposant == "Code")
                                        {
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Titre" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="titreCode" Style="width: 200px;" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Contenue" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox @bind-Value="contenuCode" Style="width: 200px;" />@* TEMPORAIRE *@
                                                </RadzenColumn>
                                            </RadzenRow>

                                        }
                                    </RadzenStack>
                                </RadzenFieldset>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Créer" />
                    </RadzenStack>
                </EditForm>
            </Popup>
            </RadzenStack>
        <RadzenRow RowGap="2" Class="justify-content-center">
            @foreach (var composant in listComposant)
            {
                        <!-- Ajoutez cette ligne -->
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Style="height:35px;" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteComposant(composant.ComposantId))" />
                    @if (composant.Type == "Code")
                    {
                    <CodeComponent composantId="composant.ComposantId" />
                    }
                    @if (composant.Type == "Exercice")
                    {
                    <ExerciceComponent composantId="composant.ComposantId" />
                    }
                    @if (composant.Type == "Image")
                    {
                    <ImageComponent composantId="composant.ComposantId" />
                    }
                    @if (composant.Type == "Reference")
                    {
                    <ReferenceComponent composantId="composant.ComposantId" />
                    }
                    @if (composant.Type == "Texte")
                    {
                        <TextComponent composantId="composant.ComposantId"/>
                    }
                    @if (composant.Type == "Video")
                    {
                        <VideoComponent composantId="composant.ComposantId"/>
                    }
            }
        </RadzenRow>
        </RadzenCard>
    </RadzenBody>




@code {
    bool sidebar1Expanded = true;
    Popup popup;
    RadzenButton button;
    private List<Composant> listComposant { get; set; } = new List<Composant>();

    private Page page { get; set; } = new();    
    private Composant composant { get; set; } = new();
    private Noeud noeud { get; set; } = new();
    private Video video { get; set; } = new();
    private TexteFormater texte { get; set; } = new();
    private Code code { get; set; } = new();
    private Reference reference { get; set; } = new();
    private Image image { get; set; } = new();
    private Exercice exercice { get; set; } = new();
    public string typeComposant { get; set; }

    //pour la video
    private string urlVideo { get; set; }
    private string descriptionVideo { get; set; }
    private string largeurVideo { get; set; }
    private string LongeurVideo { get; set; }

    //pour texte
    private string contenuTexte { get; set; }

    //pour reference
    private string urlReference { get; set; }
    private string descriptionReference { get; set; }

    //pour image
    private string urlImage { get; set; }
    private string descriptionImage { get; set; }
    private string largeurImage { get; set; }
    private string LongeurImage { get; set; }

    //pour exercice
    private string solutionExercice { get; set; }

    //pour code
    private string contenuCode { get; set; }
    private string titreCode { get; set; }

    List<string> types = new List<string>() //Permet un affichage correct du Status
    {
        "Video",
        "Texte",
        "Reference",
        "Image",
        "Exercice",
        "Code"
    };

    protected async override Task OnInitializedAsync()
    {
        var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        var composants = allComposant.Data;

        listComposant.AddRange(composants);

        var pageActuelle = await PageService.Get(await sessionStorage.GetItemAsync<int>("idPage"));
        page = pageActuelle.Data;

        var noeudActuelle = await NoeudService.Get(await sessionStorage.GetItemAsync<int>("idNoeud"));
        noeud = noeudActuelle.Data;



    }

    private async void DeleteComposant(int id)
    {
        var ordreComposant = await ComposantService.Get(id);
        var composantDelete = ordreComposant.Data;

        var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        var composants = allComposant.Data;

        foreach(var reOrdered in composants)
        {
            if(composantDelete.Ordre < reOrdered.Ordre)
            {
                reOrdered.Ordre = reOrdered.Ordre - 1;
                await ComposantService.Update(reOrdered.ComposantId, reOrdered);
            }
        }

        await ComposantService.Delete(id);
        ShouldRender();
    }
    private async void AddComposant()
    {
        var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        var composants = allComposant.Data;

        composant.PageId = await sessionStorage.GetItemAsync<int>("idPage");

        if(composants == null)
        {
            composant.Ordre = 1;
        }
        else
            composant.Ordre = composants.Count() + 1;

        composant.Type = typeComposant;

        await ComposantService.Create(composant);

        if (composant.Type == "Code")
        {
            code.Titre = titreCode;
            code.Contenue = contenuCode;
            await CodeService.Create(code);
        }
        if (composant.Type == "Exercice")
        {
            exercice.Solution= solutionExercice;
            await ExerciceService.Create(exercice);
        }
        if (composant.Type == "Image")
        {
            image.url = urlImage;
            image.Description = descriptionImage;
            image.Largeur = 500;
            image.Longueur = 800;
            await ImageService.Create(image);
        }
        if (composant.Type == "Reference")
        {
            reference.Url = urlReference;
            reference.Description = descriptionReference;
            await ReferenceService.Create(reference);
        }
        if (composant.Type == "Texte")
        {
            texte.Contenue = contenuTexte;
            await TexteService.Create(texte);
        }
        if (composant.Type == "Video")
        {
            video.Url = urlVideo;
            video.Description = descriptionVideo;
            video.Longueur = 800;
            video.Largeur = 500;

            await VideoService.Create(video);
        }


        await popup.CloseAsync();
        ShouldRender();
    }


    void TogglePopup()
    {
        if (popup != null)
        {
            popup.ToggleAsync(button.Element);
        }
    }

    async Task OnOpen()
    {
        await JSRuntime.InvokeVoidAsync("eval", "setTimeout(function(){ document.getElementById('search').focus(); }, 200)");
    }   


}
