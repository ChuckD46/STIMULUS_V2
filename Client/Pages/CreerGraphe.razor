@page "/CreerGraphe"
@using Blazored.LocalStorage;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.Entities;
@inject IGrapheService GrapheService
@inject INoeudService NoeudService
@inject ILocalStorageService localStorageService
@inject IGroupeService GroupeService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AuthenticationStateProvider authStateProvider
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppState State;
@inject NavigationManager NavigationManager

<EditForm Model="graphe" OnSubmit="AjoutGraphe">
        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenFieldset Text="Créer un nouveau Graphe">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Nom" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" Name="Nom" @bind-Value="graphe.Nom" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                             <RadzenLabel Text="Status" />
                             </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="Status" Placeholder="ACTIVER" Data="status" Style="width: 100%;" Name="Status">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Groupe associé" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="graphe.GroupeId" AllowClear="true" Placeholder="Sélectionné un groupe" Data="@listGroupe" Style="width: 100%;" TextProperty="Nom" ValueProperty="GroupeId" Name="Nom"></RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>                           
                        </RadzenStack>
                    </RadzenFieldset>                    
                </RadzenStack>
            </RadzenColumn>            
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Créer" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Annuler" Click="@Cancel" />
        </RadzenStack>
    </EditForm>

@code {
    public string NomGraphe { get; set; }
    public string Status { get; set; }
    public int IdGroupe { get; set; }
    public List<STIMULUS_V2.Shared.Models.Entities.Graphe> listGraphe { get; set; } = new List<STIMULUS_V2.Shared.Models.Entities.Graphe>();
    public List<STIMULUS_V2.Shared.Models.Entities.Groupe> listGroupe { get; set; } = new List<STIMULUS_V2.Shared.Models.Entities.Groupe>();
    public STIMULUS_V2.Shared.Models.Entities.Graphe graphe = new();
    public STIMULUS_V2.Shared.Models.Entities.Noeud nouveauNoeud = new();


    List<string> status = new List<string>() //Permet un affichage correct du Status
    {
        "ACTIVER",
        "DESACTIVER"
    };

    protected override async Task OnInitializedAsync()
    {
        State.Indentifiant = "prof";
        var responseGroupe = await GroupeService.GetAllForTeacher(State.Indentifiant);//Va cherchert tous les groupes du prof
        var groupes = responseGroupe.Data;
        listGroupe.AddRange(groupes);//Ajout des groupes dans la liste
    }

    private async void AjoutGraphe()
    {
        if (Status == "ACTIVER")
        {
            graphe.Status = GrapheStatus.ACTIVER;
        }
        else if (Status == "DESACTIVER")
        {
            graphe.Status = GrapheStatus.DESACTIVER;
        }


        var nouveauGraphe = await GrapheService.Create(graphe);
        var newgraphe = nouveauGraphe.Data;

        nouveauNoeud.GrapheId = newgraphe.GrapheId;
        nouveauNoeud.Nom = newgraphe.Nom;
        nouveauNoeud.Description = "Structure";
        nouveauNoeud.Disponibilite = DateTime.Now;
        nouveauNoeud.Obligatoire = false;             //Ajout du noeud de départ
        nouveauNoeud.Status = 4;
        nouveauNoeud.PosX = 0.0;
        nouveauNoeud.PosY = 0.0;
        nouveauNoeud.Rayon = 50;
        nouveauNoeud.Type = NoeudType.STRUCTURE;

        await NoeudService.Create(nouveauNoeud);

        await sessionStorage.SetItemAsync<int>("idGraphe", newgraphe.GrapheId);

        StateHasChanged();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
