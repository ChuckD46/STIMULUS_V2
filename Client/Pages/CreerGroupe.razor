@using STIMULUS_V2.Client.Services;
@using STIMULUS_V2.Shared.Interface.ChildInterface;

@inject AuthenticationStateProvider authStateProvider
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AppState State;
@inject NavigationManager NavigationManager
@inject IEtudiantService EtudiantService
@inject ICoursService CoursService
@inject IGroupeService GroupeService
@inject IGroupeEtudiantService GroupeEtudiantService
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@inject AppState State;
@inject RerenderService Rerender

@page "/CreerGroupe"

<EditForm Model="groupe" OnSubmit="AjoutGroupe">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Créer un nouveau Groupe">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Nom" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" Name="Nom" @bind-Value="groupe.Nom" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Date de clôture" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDatePicker Style="width: 100%;" Name="DateCloture" @bind-Value="groupe.DateCloture" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Cours associé" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="groupe.CoursId" AllowClear="true" Placeholder="Sélectionné un cours" Data="@listCours" Style="width: 100%;" TextProperty="Code" ValueProperty="CoursId" Name="Code"></RadzenDropDown>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Liste des étudiants à ajouter" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenCheckBoxList @bind-Value="selectedStudents" Data="@listEtudiant" TextProperty="Identifiant" ValueProperty="Identifiant" Style="width: 100%;" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Créer" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Annuler" Click="@Cancel" />
    </RadzenStack>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnGroupeCreated { get; set; }
    public STIMULUS_V2.Shared.Models.Entities.Groupe groupe = new();
    public STIMULUS_V2.Shared.Models.Entities.Groupe_Etudiant groupe_etudiant = new();
    public STIMULUS_V2.Shared.Models.Entities.Etudiant etudiant = new();
    public List<STIMULUS_V2.Shared.Models.Entities.Etudiant> listEtudiant { get; set; } = new List<STIMULUS_V2.Shared.Models.Entities.Etudiant>();
    public List<STIMULUS_V2.Shared.Models.Entities.Cours> listCours{ get; set; } = new List<STIMULUS_V2.Shared.Models.Entities.Cours>();
    IEnumerable<string> selectedStudents = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var cours = await CoursService.GetAll();
        var allCours = cours.Data;
        listCours.AddRange(allCours);

        var etudiant = await EtudiantService.GetAll();
        var etudiants = etudiant.Data;
        listEtudiant.AddRange(etudiants);
    }

    private async void AjoutGroupe()
    {
        try
        {
            groupe.DateCreation = DateTime.Now;
            groupe.ProfesseurId = await sessionStorage.GetItemAsync<string>("idConnexion");

            var Groupe = await GroupeService.Create(groupe);
            var nouveauGroupe = Groupe.Data;

            foreach (var etudiantId in selectedStudents)
            {
                groupe_etudiant.GroupeId = nouveauGroupe.GroupeId;
                groupe_etudiant.CodeDA = etudiantId; // Utilisez l'identifiant de l'étudiant

                await GroupeEtudiantService.Create(groupe_etudiant);
                await sessionStorage.SetItemAsync<int>("idGroupe", nouveauGroupe.GroupeId);          
            }
            await OnGroupeCreated.InvokeAsync();
            Rerender.TriggerGroupeCreated();
            NavigationManager.NavigateTo("/Groupe");
        }
        catch
        {
            await js.InvokeVoidAsync("alert", "Erreur lors de la création du groupe");
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
